{"ast":null,"code":"import axios from 'axios';\n\n// Define the error response type\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconst ML_API_URL = process.env.REACT_APP_ML_API_URL || 'http://localhost:5500';\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add token to requests if available\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Add response interceptor for error handling\napi.interceptors.response.use(response => response, error => {\n  var _error$response, _error$response2, _error$response2$data;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.dispatchEvent(new Event('auth-error'));\n    throw new Error('Session expired. Please log in again.');\n  }\n  if ((_error$response2 = error.response) !== null && _error$response2 !== void 0 && (_error$response2$data = _error$response2.data) !== null && _error$response2$data !== void 0 && _error$response2$data.message) {\n    throw new Error(error.response.data.message);\n  }\n  throw error;\n});\n\n// Auth API\nexport const login = async (email, password) => {\n  const response = await api.post('/auth/login', {\n    email,\n    password\n  });\n  localStorage.setItem('token', response.data.token);\n  return response.data;\n};\nexport const register = async (name, email, password) => {\n  const response = await api.post('/auth/register', {\n    name: name.trim(),\n    email: email.trim().toLowerCase(),\n    password\n  });\n  if (response.data.token) {\n    localStorage.setItem('token', response.data.token);\n  }\n  return response.data;\n};\n\n// Users API\nexport const getUsers = async () => {\n  const response = await api.get('/users');\n  return response.data;\n};\nexport const getCurrentUser = async () => {\n  const response = await api.get('/users/me');\n  return response.data;\n};\n\n// Movies API\nexport const getAllMovies = async () => {\n  const response = await api.get('/movies');\n  return response.data;\n};\nexport const getMovie = async id => {\n  try {\n    // First try to get by tmdbId\n    const response = await fetch(`${API_URL}/movies/tmdb/${id}`);\n    if (!response.ok) {\n      // If that fails, try by _id\n      const responseById = await fetch(`${API_URL}/movies/${id}`);\n      if (!responseById.ok) {\n        throw new Error('Movie not found');\n      }\n      return responseById.json();\n    }\n    return response.json();\n  } catch (error) {\n    console.error('Error fetching movie:', error);\n    throw error;\n  }\n};\nexport const searchMovies = async query => {\n  const response = await api.get(`/movies/search?query=${encodeURIComponent(query)}`);\n  return response.data;\n};\n\n// Reviews API\nexport const createReview = async review => {\n  const response = await api.post('/reviews', review);\n  return response.data;\n};\nexport const getReviews = async params => {\n  var _response$data$pagina;\n  const queryParams = new URLSearchParams();\n  if (params.page) queryParams.append('page', params.page.toString());\n  if (params.limit) queryParams.append('limit', params.limit.toString());\n  if (params.movieId) queryParams.append('movieId', params.movieId);\n  if (params.userId) queryParams.append('userId', params.userId);\n  const response = await api.get(`/reviews?${queryParams.toString()}`);\n  return {\n    reviews: response.data.reviews || [],\n    stats: response.data.stats || null,\n    pagination: {\n      pages: ((_response$data$pagina = response.data.pagination) === null || _response$data$pagina === void 0 ? void 0 : _response$data$pagina.pages) || 1\n    }\n  };\n};\nexport const getReview = async id => {\n  const response = await api.get(`/reviews/${id}`);\n  return response.data;\n};\n\n// Stats API\nexport const getStats = async () => {\n  const response = await api.get('/reviews/stats');\n  return response.data;\n};\nexport const getUserStats = async userId => {\n  const response = await api.get(`/reviews/stats/user/${userId}`);\n  return response.data;\n};\n\n// Utility functions\nexport const isAuthenticated = () => {\n  return !!localStorage.getItem('token');\n};\nexport const logout = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('user');\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","ML_API_URL","REACT_APP_ML_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","response","error","_error$response","_error$response2","_error$response2$data","status","removeItem","window","dispatchEvent","Event","Error","data","message","login","email","password","post","setItem","register","name","trim","toLowerCase","getUsers","get","getCurrentUser","getAllMovies","getMovie","id","fetch","ok","responseById","json","console","searchMovies","query","encodeURIComponent","createReview","review","getReviews","params","_response$data$pagina","queryParams","URLSearchParams","page","append","toString","limit","movieId","userId","reviews","stats","pagination","pages","getReview","getStats","getUserStats","isAuthenticated","logout"],"sources":["C:/capstone-Project/client/src/services/api.ts"],"sourcesContent":["import axios, { AxiosError } from 'axios';\n\n// Define the error response type\ninterface ApiErrorResponse {\n  message: string;\n}\n\ninterface Movie {\n  _id: string;\n  title: string;\n  year: string;\n  genre: string;\n  imageUrl: string;\n  description: string;\n  tmdbId: string;\n  runtime: number;\n  reviewCount: number;\n  avgRating: number;\n  reviews: Review[];\n}\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconst ML_API_URL = process.env.REACT_APP_ML_API_URL || 'http://localhost:5500';\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add token to requests if available\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Add response interceptor for error handling\napi.interceptors.response.use(\n  (response) => response,\n  (error: AxiosError<ApiErrorResponse>) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      window.dispatchEvent(new Event('auth-error'));\n      throw new Error('Session expired. Please log in again.');\n    }\n    \n    if (error.response?.data?.message) {\n      throw new Error(error.response.data.message);\n    }\n    throw error;\n  }\n);\n\n// Auth API\nexport const login = async (email: string, password: string) => {\n  const response = await api.post<{ token: string; user: any }>('/auth/login', { email, password });\n  localStorage.setItem('token', response.data.token);\n  return response.data;\n};\n\nexport const register = async (name: string, email: string, password: string) => {\n  const response = await api.post<{ token: string; user: any }>('/auth/register', {\n    name: name.trim(),\n    email: email.trim().toLowerCase(),\n    password\n  });\n  if (response.data.token) {\n    localStorage.setItem('token', response.data.token);\n  }\n  return response.data;\n};\n\n// Users API\nexport const getUsers = async () => {\n  const response = await api.get('/users');\n  return response.data;\n};\n\nexport const getCurrentUser = async () => {\n  const response = await api.get('/users/me');\n  return response.data;\n};\n\n// Movies API\nexport const getAllMovies = async () => {\n  const response = await api.get('/movies');\n  return response.data;\n};\n\nexport const getMovie = async (id: string): Promise<Movie> => {\n  try {\n    // First try to get by tmdbId\n    const response = await fetch(`${API_URL}/movies/tmdb/${id}`);\n    if (!response.ok) {\n      // If that fails, try by _id\n      const responseById = await fetch(`${API_URL}/movies/${id}`);\n      if (!responseById.ok) {\n        throw new Error('Movie not found');\n      }\n      return responseById.json();\n    }\n    return response.json();\n  } catch (error) {\n    console.error('Error fetching movie:', error);\n    throw error;\n  }\n};\n\nexport const searchMovies = async (query: string) => {\n  const response = await api.get(`/movies/search?query=${encodeURIComponent(query)}`);\n  return response.data;\n};\n\n// Reviews API\nexport const createReview = async (review: {\n  movieId: string;\n  movieTitle: string;\n  reviewText: string;\n}) => {\n  const response = await api.post('/reviews', review);\n  return response.data;\n};\n\nexport const getReviews = async (params: {\n  page?: number;\n  limit?: number;\n  movieId?: string;\n  userId?: string;\n}) => {\n  const queryParams = new URLSearchParams();\n  if (params.page) queryParams.append('page', params.page.toString());\n  if (params.limit) queryParams.append('limit', params.limit.toString());\n  if (params.movieId) queryParams.append('movieId', params.movieId);\n  if (params.userId) queryParams.append('userId', params.userId);\n\n  const response = await api.get(`/reviews?${queryParams.toString()}`);\n  return {\n    reviews: response.data.reviews || [],\n    stats: response.data.stats || null,\n    pagination: {\n      pages: response.data.pagination?.pages || 1\n    }\n  };\n};\n\nexport const getReview = async (id: string) => {\n  const response = await api.get(`/reviews/${id}`);\n  return response.data;\n};\n\n// Stats API\nexport const getStats = async () => {\n  const response = await api.get('/reviews/stats');\n  return response.data;\n};\n\nexport const getUserStats = async (userId: string) => {\n  const response = await api.get(`/reviews/stats/user/${userId}`);\n  return response.data;\n};\n\n// Utility functions\nexport const isAuthenticated = () => {\n  return !!localStorage.getItem('token');\n};\n\nexport const logout = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('user');\n};\n\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}