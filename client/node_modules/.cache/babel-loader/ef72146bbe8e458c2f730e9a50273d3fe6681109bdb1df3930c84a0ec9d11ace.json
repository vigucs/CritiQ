{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add a request interceptor to add the auth token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add a response interceptor to handle errors\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nexport const authService = {\n  login: async (email, password) => {\n    const response = await api.post('/auth/login', {\n      email,\n      password\n    });\n    return response.data;\n  },\n  register: async (email, password, name) => {\n    const response = await api.post('/auth/register', {\n      email,\n      password,\n      name\n    });\n    return response.data;\n  },\n  logout: () => {\n    localStorage.removeItem('token');\n  }\n};\nexport const reviewService = {\n  createReview: async review => {\n    const response = await api.post('/reviews', review);\n    return response.data;\n  },\n  getReviews: async () => {\n    const response = await api.get('/reviews');\n    return response.data;\n  },\n  getReview: async id => {\n    const response = await api.get(`/reviews/${id}`);\n    return response.data;\n  },\n  updateReview: async (id, review) => {\n    const response = await api.put(`/reviews/${id}`, review);\n    return response.data;\n  },\n  deleteReview: async id => {\n    const response = await api.delete(`/reviews/${id}`);\n    return response.data;\n  }\n};\nexport const mlService = {\n  analyzeSentiment: async text => {\n    const response = await api.post('/ml/analyze', {\n      text\n    });\n    return response.data;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","authService","login","email","password","post","data","register","name","logout","reviewService","createReview","review","getReviews","get","getReview","id","updateReview","put","deleteReview","delete","mlService","analyzeSentiment","text"],"sources":["C:/capstone-Project/client/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Add a request interceptor to add the auth token to requests\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Add a response interceptor to handle errors\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      localStorage.removeItem('token');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const authService = {\r\n  login: async (email: string, password: string) => {\r\n    const response = await api.post('/auth/login', { email, password });\r\n    return response.data;\r\n  },\r\n  register: async (email: string, password: string, name: string) => {\r\n    const response = await api.post('/auth/register', { email, password, name });\r\n    return response.data;\r\n  },\r\n  logout: () => {\r\n    localStorage.removeItem('token');\r\n  },\r\n};\r\n\r\nexport const reviewService = {\r\n  createReview: async (review: { movieTitle: string; reviewText: string; rating: number }) => {\r\n    const response = await api.post('/reviews', review);\r\n    return response.data;\r\n  },\r\n  getReviews: async () => {\r\n    const response = await api.get('/reviews');\r\n    return response.data;\r\n  },\r\n  getReview: async (id: string) => {\r\n    const response = await api.get(`/reviews/${id}`);\r\n    return response.data;\r\n  },\r\n  updateReview: async (id: string, review: { movieTitle: string; reviewText: string; rating: number }) => {\r\n    const response = await api.put(`/reviews/${id}`, review);\r\n    return response.data;\r\n  },\r\n  deleteReview: async (id: string) => {\r\n    const response = await api.delete(`/reviews/${id}`);\r\n    return response.data;\r\n  },\r\n};\r\n\r\nexport const mlService = {\r\n  analyzeSentiment: async (text: string) => {\r\n    const response = await api.post('/ml/analyze', { text });\r\n    return response.data;\r\n  },\r\n};\r\n\r\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}