{"ast":null,"code":"import axios, { AxiosError } from 'axios';\n\n// Define the error response type\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconst ML_API_URL = process.env.REACT_APP_ML_API_URL || 'http://localhost:5500';\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add token to requests if available\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    console.log('Adding authorization token to request');\n    config.headers.Authorization = `Bearer ${token}`;\n  } else {\n    console.warn('No token found in localStorage');\n  }\n  return config;\n});\n\n// Add response interceptor for error handling\napi.interceptors.response.use(response => response, error => {\n  var _error$response, _error$response2, _error$config, _error$response3, _error$response4, _error$response4$data;\n  console.error('API Error:', {\n    status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n    data: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data,\n    message: error.message,\n    url: (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url\n  });\n\n  // Handle 401 Unauthorized errors\n  if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 401) {\n    console.error('Authentication error - clearing token');\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.dispatchEvent(new Event('auth-error'));\n    throw new Error('Session expired. Please log in again.');\n  }\n  if ((_error$response4 = error.response) !== null && _error$response4 !== void 0 && (_error$response4$data = _error$response4.data) !== null && _error$response4$data !== void 0 && _error$response4$data.message) {\n    throw new Error(error.response.data.message);\n  }\n  throw error;\n});\n\n// Auth API\nexport const login = async (email, password) => {\n  try {\n    console.log('Attempting login with:', {\n      email\n    });\n    try {\n      const response = await api.post('/auth/login', {\n        email,\n        password\n      });\n      console.log('Login successful');\n      localStorage.setItem('token', response.data.token);\n      return response.data;\n    } catch (err) {\n      var _err$response, _err$response2, _err$response3, _err$response3$data;\n      console.error('Login failed:', err);\n      // Improve error handling for authentication errors\n      if (((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.status) === 401) {\n        throw new Error('Invalid email or password. Please try again.');\n      } else if (((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : _err$response2.status) === 404) {\n        throw new Error('User not found. Please check your email or create an account.');\n      } else if ((_err$response3 = err.response) !== null && _err$response3 !== void 0 && (_err$response3$data = _err$response3.data) !== null && _err$response3$data !== void 0 && _err$response3$data.message) {\n        throw new Error(err.response.data.message);\n      } else {\n        throw new Error('Login failed. Please try again later.');\n      }\n    }\n  } catch (error) {\n    console.error('Login error:', error);\n    throw error;\n  }\n};\nexport const googleLogin = async tokenId => {\n  try {\n    console.log('Attempting Google login with token:', tokenId.substring(0, 10) + '...');\n    const response = await api.post('/auth/google', {\n      tokenId\n    });\n    localStorage.setItem('token', response.data.token);\n    return response.data;\n  } catch (error) {\n    console.error('Google login error:', error);\n    throw error;\n  }\n};\nexport const register = async (name, email, password) => {\n  try {\n    console.log('Registering user:', {\n      name,\n      email\n    });\n    const response = await api.post('/auth/register', {\n      name: name.trim(),\n      email: email.trim().toLowerCase(),\n      password\n    });\n    console.log('Registration successful:', response.data);\n    if (response.data.token) {\n      localStorage.setItem('token', response.data.token);\n    }\n    return response.data;\n  } catch (error) {\n    console.error('Registration error:', error);\n    if (error instanceof AxiosError) {\n      var _error$response5, _error$response6, _error$response6$data;\n      if (((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.status) === 409) {\n        throw new Error('A user with this email already exists. Please try logging in instead.');\n      }\n      if ((_error$response6 = error.response) !== null && _error$response6 !== void 0 && (_error$response6$data = _error$response6.data) !== null && _error$response6$data !== void 0 && _error$response6$data.message) {\n        throw new Error(error.response.data.message);\n      }\n    }\n    throw new Error('Registration failed. Please try again.');\n  }\n};\n\n// Users API\nexport const getUsers = async () => {\n  const response = await api.get('/users');\n  return response.data;\n};\nexport const getCurrentUser = async () => {\n  const response = await api.get('/users/me');\n  return response.data;\n};\nexport const updateUserRole = async (userId, role) => {\n  const response = await api.patch(`/users/${userId}/role`, {\n    role\n  });\n  return response.data;\n};\nexport const deleteUser = async userId => {\n  const response = await api.delete(`/users/${userId}`);\n  return response.data;\n};\n\n// Movies API\nexport const getAllMovies = async () => {\n  const response = await api.get('/movies');\n  return response.data;\n};\nexport const getMovie = async id => {\n  const response = await api.get(`/movies/${id}`);\n  return response.data;\n};\nexport const searchMovies = async query => {\n  const response = await api.get(`/movies/search?query=${encodeURIComponent(query)}`);\n  return response.data;\n};\nexport const addMovie = async movie => {\n  const response = await api.post('/movies', movie);\n  return response.data;\n};\nexport const updateMovie = async (id, movie) => {\n  const response = await api.put(`/movies/${id}`, movie);\n  return response.data;\n};\nexport const deleteMovie = async id => {\n  const response = await api.delete(`/movies/${id}`);\n  return response.data;\n};\n\n// Updated Reviews API to work with movies\nexport const createReview = async review => {\n  try {\n    console.log('Starting review creation process...');\n\n    // Check authentication first\n    const token = localStorage.getItem('token');\n    if (!token) {\n      console.error('No authentication token found');\n      throw new Error('You must be logged in to create a review');\n    }\n\n    // Make sure the review text is at least 10 characters\n    if (review.reviewText.trim().length < 10) {\n      throw new Error('Review text must be at least 10 characters long');\n    }\n\n    // First, get sentiment analysis from ML API\n    console.log('Sending text to ML API for sentiment analysis:', review.reviewText.substring(0, 50) + '...');\n    try {\n      const sentimentResponse = await axios.post(`${ML_API_URL}/predict`, {\n        text: review.reviewText\n      });\n      console.log('Received sentiment analysis:', sentimentResponse.data);\n\n      // Normalize the sentiment value to match what the backend accepts\n      let normalizedSentiment = 'neutral';\n      const rawSentiment = sentimentResponse.data.sentiment.toLowerCase();\n      if (rawSentiment.includes('positive')) {\n        normalizedSentiment = 'positive';\n      } else if (rawSentiment.includes('negative')) {\n        normalizedSentiment = 'negative';\n      }\n\n      // Then create review with normalized sentiment\n      const reviewData = {\n        ...review,\n        sentiment: normalizedSentiment\n      };\n      console.log('Sending review to backend API:', reviewData);\n      const response = await api.post('/reviews', reviewData);\n      console.log('Review created successfully:', response.data);\n      return response.data;\n    } catch (mlError) {\n      console.error('ML API error, using neutral sentiment:', mlError);\n      // If ML API fails, continue with neutral sentiment\n      const reviewData = {\n        ...review,\n        sentiment: 'neutral'\n      };\n      console.log('Sending review to backend API with default sentiment:', reviewData);\n      const response = await api.post('/reviews', reviewData);\n      console.log('Review created successfully:', response.data);\n      return response.data;\n    }\n  } catch (error) {\n    console.error('Error in createReview:', error);\n    if (axios.isAxiosError(error)) {\n      var _error$config2, _error$config3, _error$response7, _error$response8;\n      console.error('API Error details:', {\n        endpoint: (_error$config2 = error.config) === null || _error$config2 === void 0 ? void 0 : _error$config2.url,\n        method: (_error$config3 = error.config) === null || _error$config3 === void 0 ? void 0 : _error$config3.method,\n        statusCode: (_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.status,\n        responseData: (_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : _error$response8.data\n      });\n    }\n    throw error;\n  }\n};\nexport const getReviews = async params => {\n  const queryString = new URLSearchParams();\n  if (params !== null && params !== void 0 && params.movieId) queryString.append('movieId', params.movieId);\n  if (params !== null && params !== void 0 && params.page) queryString.append('page', params.page.toString());\n  if (params !== null && params !== void 0 && params.limit) queryString.append('limit', params.limit.toString());\n  const response = await api.get(`/reviews?${queryString}`);\n  return response.data;\n};\nexport const getReview = async id => {\n  const response = await api.get(`/reviews/${id}`);\n  return response.data;\n};\nexport const updateReview = async (id, review) => {\n  const response = await api.put(`/reviews/${id}`, review);\n  return response.data;\n};\nexport const deleteReview = async id => {\n  const response = await api.delete(`/reviews/${id}`);\n  return response.data;\n};\n\n// Stats API\nexport const getStats = async () => {\n  try {\n    const response = await api.get('/reviews/stats');\n    console.log('Raw stats response:', response);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching stats:', error);\n    // Return default data structure\n    return {\n      totalReviews: 0,\n      averageRating: 0,\n      sentimentBreakdown: {\n        positive: 0,\n        negative: 0,\n        neutral: 0\n      },\n      recentReviews: []\n    };\n  }\n};\nexport const getUserStats = async userId => {\n  try {\n    const response = await api.get(`/reviews/stats/user/${userId}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching user stats for user ${userId}:`, error);\n    // Return default data structure\n    return {\n      totalReviews: 0,\n      averageRating: 0,\n      sentimentBreakdown: {\n        positive: 0,\n        negative: 0,\n        neutral: 0\n      },\n      recentReviews: [],\n      monthlyStats: []\n    };\n  }\n};\n\n// ML API\nexport const analyzeSentiment = async text => {\n  const response = await axios.post(`${ML_API_URL}/predict`, {\n    text\n  });\n  return response.data;\n};\n\n// Utility functions\nexport const isAuthenticated = () => {\n  const token = localStorage.getItem('token');\n  return !!token;\n};\nexport const logout = () => {\n  localStorage.removeItem('token');\n};\nexport default api;","map":{"version":3,"names":["axios","AxiosError","API_URL","process","env","REACT_APP_API_URL","ML_API_URL","REACT_APP_ML_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","console","log","Authorization","warn","response","error","_error$response","_error$response2","_error$config","_error$response3","_error$response4","_error$response4$data","status","data","message","url","removeItem","window","dispatchEvent","Event","Error","login","email","password","post","setItem","err","_err$response","_err$response2","_err$response3","_err$response3$data","googleLogin","tokenId","substring","register","name","trim","toLowerCase","_error$response5","_error$response6","_error$response6$data","getUsers","get","getCurrentUser","updateUserRole","userId","role","patch","deleteUser","delete","getAllMovies","getMovie","id","searchMovies","query","encodeURIComponent","addMovie","movie","updateMovie","put","deleteMovie","createReview","review","reviewText","length","sentimentResponse","text","normalizedSentiment","rawSentiment","sentiment","includes","reviewData","mlError","isAxiosError","_error$config2","_error$config3","_error$response7","_error$response8","endpoint","method","statusCode","responseData","getReviews","params","queryString","URLSearchParams","movieId","append","page","toString","limit","getReview","updateReview","deleteReview","getStats","totalReviews","averageRating","sentimentBreakdown","positive","negative","neutral","recentReviews","getUserStats","monthlyStats","analyzeSentiment","isAuthenticated","logout"],"sources":["C:/capstone-Project/client/src/services/api.ts"],"sourcesContent":["import axios, { AxiosError } from 'axios';\r\n\r\n// Define the error response type\r\ninterface ApiErrorResponse {\r\n  message: string;\r\n}\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\nconst ML_API_URL = process.env.REACT_APP_ML_API_URL || 'http://localhost:5500';\r\n\r\n// Create axios instance with base URL\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Add token to requests if available\r\napi.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem('token');\r\n  if (token) {\r\n    console.log('Adding authorization token to request');\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  } else {\r\n    console.warn('No token found in localStorage');\r\n  }\r\n  return config;\r\n});\r\n\r\n// Add response interceptor for error handling\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error: AxiosError<ApiErrorResponse>) => {\r\n    console.error('API Error:', {\r\n      status: error.response?.status,\r\n      data: error.response?.data,\r\n      message: error.message,\r\n      url: error.config?.url\r\n    });\r\n    \r\n    // Handle 401 Unauthorized errors\r\n    if (error.response?.status === 401) {\r\n      console.error('Authentication error - clearing token');\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n      window.dispatchEvent(new Event('auth-error'));\r\n      throw new Error('Session expired. Please log in again.');\r\n    }\r\n    \r\n    if (error.response?.data?.message) {\r\n      throw new Error(error.response.data.message);\r\n    }\r\n    throw error;\r\n  }\r\n);\r\n\r\n// Auth API\r\nexport const login = async (email: string, password: string) => {\r\n  try {\r\n    console.log('Attempting login with:', { email });\r\n    try {\r\n      const response = await api.post<{ token: string; user: any }>('/auth/login', \r\n        { email, password }\r\n      );\r\n      console.log('Login successful');\r\n      localStorage.setItem('token', response.data.token);\r\n      return response.data;\r\n    } catch (err: any) {\r\n      console.error('Login failed:', err);\r\n      // Improve error handling for authentication errors\r\n      if (err.response?.status === 401) {\r\n        throw new Error('Invalid email or password. Please try again.');\r\n      } else if (err.response?.status === 404) {\r\n        throw new Error('User not found. Please check your email or create an account.');\r\n      } else if (err.response?.data?.message) {\r\n        throw new Error(err.response.data.message);\r\n      } else {\r\n        throw new Error('Login failed. Please try again later.');\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error('Login error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const googleLogin = async (tokenId: string) => {\r\n  try {\r\n    console.log('Attempting Google login with token:', tokenId.substring(0, 10) + '...');\r\n    const response = await api.post<{ token: string; user: any }>('/auth/google', { tokenId });\r\n    localStorage.setItem('token', response.data.token);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Google login error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const register = async (name: string, email: string, password: string) => {\r\n  try {\r\n    console.log('Registering user:', { name, email });\r\n    const response = await api.post<{ token: string; user: any }>('/auth/register', {\r\n      name: name.trim(),\r\n      email: email.trim().toLowerCase(),\r\n      password\r\n    });\r\n    console.log('Registration successful:', response.data);\r\n    if (response.data.token) {\r\n      localStorage.setItem('token', response.data.token);\r\n    }\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Registration error:', error);\r\n    if (error instanceof AxiosError) {\r\n      if (error.response?.status === 409) {\r\n        throw new Error('A user with this email already exists. Please try logging in instead.');\r\n      }\r\n      if (error.response?.data?.message) {\r\n        throw new Error(error.response.data.message);\r\n      }\r\n    }\r\n    throw new Error('Registration failed. Please try again.');\r\n  }\r\n};\r\n\r\n// Users API\r\nexport const getUsers = async () => {\r\n  const response = await api.get('/users');\r\n  return response.data;\r\n};\r\n\r\nexport const getCurrentUser = async () => {\r\n  const response = await api.get('/users/me');\r\n  return response.data;\r\n};\r\n\r\nexport const updateUserRole = async (userId: string, role: string) => {\r\n  const response = await api.patch(`/users/${userId}/role`, { role });\r\n  return response.data;\r\n};\r\n\r\nexport const deleteUser = async (userId: string) => {\r\n  const response = await api.delete(`/users/${userId}`);\r\n  return response.data;\r\n};\r\n\r\n// Movies API\r\nexport const getAllMovies = async () => {\r\n  const response = await api.get('/movies');\r\n  return response.data;\r\n};\r\n\r\nexport const getMovie = async (id: string) => {\r\n  const response = await api.get(`/movies/${id}`);\r\n  return response.data;\r\n};\r\n\r\nexport const searchMovies = async (query: string) => {\r\n  const response = await api.get(`/movies/search?query=${encodeURIComponent(query)}`);\r\n  return response.data;\r\n};\r\n\r\nexport const addMovie = async (movie: {\r\n  title: string;\r\n  year: string;\r\n  genre: string;\r\n  imageUrl?: string;\r\n  description?: string;\r\n}) => {\r\n  const response = await api.post('/movies', movie);\r\n  return response.data;\r\n};\r\n\r\nexport const updateMovie = async (\r\n  id: string,\r\n  movie: {\r\n    title?: string;\r\n    year?: string;\r\n    genre?: string;\r\n    imageUrl?: string;\r\n    description?: string;\r\n  }\r\n) => {\r\n  const response = await api.put(`/movies/${id}`, movie);\r\n  return response.data;\r\n};\r\n\r\nexport const deleteMovie = async (id: string) => {\r\n  const response = await api.delete(`/movies/${id}`);\r\n  return response.data;\r\n};\r\n\r\n// Updated Reviews API to work with movies\r\nexport const createReview = async (review: {\r\n  movieId: string;\r\n  movieTitle: string;\r\n  reviewText: string;\r\n  rating: number;\r\n}) => {\r\n  try {\r\n    console.log('Starting review creation process...');\r\n    \r\n    // Check authentication first\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n      console.error('No authentication token found');\r\n      throw new Error('You must be logged in to create a review');\r\n    }\r\n    \r\n    // Make sure the review text is at least 10 characters\r\n    if (review.reviewText.trim().length < 10) {\r\n      throw new Error('Review text must be at least 10 characters long');\r\n    }\r\n    \r\n    // First, get sentiment analysis from ML API\r\n    console.log('Sending text to ML API for sentiment analysis:', review.reviewText.substring(0, 50) + '...');\r\n    try {\r\n      const sentimentResponse = await axios.post(`${ML_API_URL}/predict`, {\r\n        text: review.reviewText,\r\n      });\r\n      console.log('Received sentiment analysis:', sentimentResponse.data);\r\n\r\n      // Normalize the sentiment value to match what the backend accepts\r\n      let normalizedSentiment = 'neutral';\r\n      const rawSentiment = sentimentResponse.data.sentiment.toLowerCase();\r\n      \r\n      if (rawSentiment.includes('positive')) {\r\n        normalizedSentiment = 'positive';\r\n      } else if (rawSentiment.includes('negative')) {\r\n        normalizedSentiment = 'negative';\r\n      }\r\n\r\n      // Then create review with normalized sentiment\r\n      const reviewData = {\r\n        ...review,\r\n        sentiment: normalizedSentiment,\r\n      };\r\n      console.log('Sending review to backend API:', reviewData);\r\n      \r\n      const response = await api.post('/reviews', reviewData);\r\n      console.log('Review created successfully:', response.data);\r\n      \r\n      return response.data;\r\n    } catch (mlError) {\r\n      console.error('ML API error, using neutral sentiment:', mlError);\r\n      // If ML API fails, continue with neutral sentiment\r\n      const reviewData = {\r\n        ...review,\r\n        sentiment: 'neutral',\r\n      };\r\n      console.log('Sending review to backend API with default sentiment:', reviewData);\r\n      \r\n      const response = await api.post('/reviews', reviewData);\r\n      console.log('Review created successfully:', response.data);\r\n      \r\n      return response.data;\r\n    }\r\n  } catch (error) {\r\n    console.error('Error in createReview:', error);\r\n    if (axios.isAxiosError(error)) {\r\n      console.error('API Error details:', {\r\n        endpoint: error.config?.url,\r\n        method: error.config?.method,\r\n        statusCode: error.response?.status,\r\n        responseData: error.response?.data,\r\n      });\r\n    }\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getReviews = async (params?: { movieId?: string; page?: number; limit?: number }) => {\r\n  const queryString = new URLSearchParams();\r\n  if (params?.movieId) queryString.append('movieId', params.movieId);\r\n  if (params?.page) queryString.append('page', params.page.toString());\r\n  if (params?.limit) queryString.append('limit', params.limit.toString());\r\n  \r\n  const response = await api.get(`/reviews?${queryString}`);\r\n  return response.data;\r\n};\r\n\r\nexport const getReview = async (id: string) => {\r\n  const response = await api.get(`/reviews/${id}`);\r\n  return response.data;\r\n};\r\n\r\nexport const updateReview = async (\r\n  id: string,\r\n  review: {\r\n    movieTitle?: string;\r\n    reviewText?: string;\r\n    rating?: number;\r\n  }\r\n) => {\r\n  const response = await api.put(`/reviews/${id}`, review);\r\n  return response.data;\r\n};\r\n\r\nexport const deleteReview = async (id: string) => {\r\n  const response = await api.delete(`/reviews/${id}`);\r\n  return response.data;\r\n};\r\n\r\n// Stats API\r\nexport const getStats = async () => {\r\n  try {\r\n    const response = await api.get('/reviews/stats');\r\n    console.log('Raw stats response:', response);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching stats:', error);\r\n    // Return default data structure\r\n    return {\r\n      totalReviews: 0,\r\n      averageRating: 0,\r\n      sentimentBreakdown: { positive: 0, negative: 0, neutral: 0 },\r\n      recentReviews: []\r\n    };\r\n  }\r\n};\r\n\r\nexport const getUserStats = async (userId: string) => {\r\n  try {\r\n    const response = await api.get(`/reviews/stats/user/${userId}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Error fetching user stats for user ${userId}:`, error);\r\n    // Return default data structure\r\n    return {\r\n      totalReviews: 0,\r\n      averageRating: 0,\r\n      sentimentBreakdown: { positive: 0, negative: 0, neutral: 0 },\r\n      recentReviews: [],\r\n      monthlyStats: []\r\n    };\r\n  }\r\n};\r\n\r\n// ML API\r\nexport const analyzeSentiment = async (text: string) => {\r\n  const response = await axios.post(`${ML_API_URL}/predict`, { text });\r\n  return response.data;\r\n};\r\n\r\n// Utility functions\r\nexport const isAuthenticated = () => {\r\n  const token = localStorage.getItem('token');\r\n  return !!token;\r\n};\r\n\r\nexport const logout = () => {\r\n  localStorage.removeItem('token');\r\n};\r\n\r\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}