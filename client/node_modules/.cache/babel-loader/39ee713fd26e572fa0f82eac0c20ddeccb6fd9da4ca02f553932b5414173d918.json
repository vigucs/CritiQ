{"ast":null,"code":"var _jsxFileName = \"C:\\\\capstone-Project\\\\client\\\\src\\\\context\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { login, register, googleLogin } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check for saved token and user data\n    const savedToken = localStorage.getItem('token');\n    const savedUser = localStorage.getItem('user');\n    if (savedToken && savedUser) {\n      setToken(savedToken);\n      try {\n        setUser(JSON.parse(savedUser));\n      } catch (e) {\n        console.error('Failed to parse saved user data:', e);\n        localStorage.removeItem('user');\n        localStorage.removeItem('token');\n      }\n    }\n    setLoading(false);\n\n    // Listen for authentication errors\n    const handleAuthError = () => {\n      console.log('Auth error event received, logging out');\n      setToken(null);\n      setUser(null);\n    };\n    window.addEventListener('auth-error', handleAuthError);\n    return () => {\n      window.removeEventListener('auth-error', handleAuthError);\n    };\n  }, []);\n  const handleLogin = async (email, password) => {\n    try {\n      const data = await login(email, password);\n      setToken(data.token);\n      setUser(data.user);\n      localStorage.setItem('token', data.token);\n      localStorage.setItem('user', JSON.stringify(data.user));\n    } catch (error) {\n      throw error;\n    }\n  };\n  const handleGoogleLogin = async tokenId => {\n    try {\n      const data = await googleLogin(tokenId);\n      setToken(data.token);\n      setUser(data.user);\n      localStorage.setItem('token', data.token);\n      localStorage.setItem('user', JSON.stringify(data.user));\n    } catch (error) {\n      throw error;\n    }\n  };\n  const handleRegister = async (name, email, password) => {\n    try {\n      const data = await register(name, email, password);\n      if (data.token && data.user) {\n        setToken(data.token);\n        setUser(data.user);\n        localStorage.setItem('token', data.token);\n        localStorage.setItem('user', JSON.stringify(data.user));\n      } else {\n        throw new Error('Registration successful but no user data received');\n      }\n    } catch (error) {\n      console.error('Registration error:', error);\n      throw error;\n    }\n  };\n  const handleLogout = () => {\n    setToken(null);\n    setUser(null);\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  };\n  const value = {\n    user,\n    token,\n    isAuthenticated: !!token,\n    login: handleLogin,\n    googleLogin: handleGoogleLogin,\n    register: handleRegister,\n    logout: handleLogout,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 10\n  }, this);\n};\n_s(AuthProvider, \"uAkFQMmIUxfxJcQTEb8tCM/KFt4=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","login","register","googleLogin","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","user","setUser","token","setToken","loading","setLoading","savedToken","localStorage","getItem","savedUser","JSON","parse","e","console","error","removeItem","handleAuthError","log","window","addEventListener","removeEventListener","handleLogin","email","password","data","setItem","stringify","handleGoogleLogin","tokenId","handleRegister","name","Error","handleLogout","value","isAuthenticated","logout","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["C:/capstone-Project/client/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { login, register, googleLogin } from '../services/api';\r\n\r\ninterface User {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n}\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  token: string | null;\r\n  isAuthenticated: boolean;\r\n  login: (email: string, password: string) => Promise<void>;\r\n  googleLogin: (tokenId: string) => Promise<void>;\r\n  register: (name: string, email: string, password: string) => Promise<void>;\r\n  logout: () => void;\r\n  loading: boolean;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [token, setToken] = useState<string | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Check for saved token and user data\r\n    const savedToken = localStorage.getItem('token');\r\n    const savedUser = localStorage.getItem('user');\r\n\r\n    if (savedToken && savedUser) {\r\n      setToken(savedToken);\r\n      try {\r\n        setUser(JSON.parse(savedUser));\r\n      } catch (e) {\r\n        console.error('Failed to parse saved user data:', e);\r\n        localStorage.removeItem('user');\r\n        localStorage.removeItem('token');\r\n      }\r\n    }\r\n\r\n    setLoading(false);\r\n    \r\n    // Listen for authentication errors\r\n    const handleAuthError = () => {\r\n      console.log('Auth error event received, logging out');\r\n      setToken(null);\r\n      setUser(null);\r\n    };\r\n    \r\n    window.addEventListener('auth-error', handleAuthError);\r\n    \r\n    return () => {\r\n      window.removeEventListener('auth-error', handleAuthError);\r\n    };\r\n  }, []);\r\n\r\n  const handleLogin = async (email: string, password: string) => {\r\n    try {\r\n      const data = await login(email, password);\r\n      setToken(data.token);\r\n      setUser(data.user);\r\n      localStorage.setItem('token', data.token);\r\n      localStorage.setItem('user', JSON.stringify(data.user));\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handleGoogleLogin = async (tokenId: string) => {\r\n    try {\r\n      const data = await googleLogin(tokenId);\r\n      setToken(data.token);\r\n      setUser(data.user);\r\n      localStorage.setItem('token', data.token);\r\n      localStorage.setItem('user', JSON.stringify(data.user));\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handleRegister = async (name: string, email: string, password: string) => {\r\n    try {\r\n      const data = await register(name, email, password);\r\n      if (data.token && data.user) {\r\n        setToken(data.token);\r\n        setUser(data.user);\r\n        localStorage.setItem('token', data.token);\r\n        localStorage.setItem('user', JSON.stringify(data.user));\r\n      } else {\r\n        throw new Error('Registration successful but no user data received');\r\n      }\r\n    } catch (error) {\r\n      console.error('Registration error:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    setToken(null);\r\n    setUser(null);\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    token,\r\n    isAuthenticated: !!token,\r\n    login: handleLogin,\r\n    googleLogin: handleGoogleLogin,\r\n    register: handleRegister,\r\n    logout: handleLogout,\r\n    loading,\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport default AuthContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}